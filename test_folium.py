"""
Script de Teste para o Visualizador Folium.

Este script testa a gera√ß√£o de mapas HTML interativos usando os dados
de exemplo do projeto.
"""
import json
import sys
from pathlib import Path

# Adicionar diret√≥rio raiz ao path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from src.visualization.folium_visualizer import FoliumVisualizer, generate_route_map, get_point_label


def test_folium_basic():
    """Teste b√°sico do visualizador Folium."""
    
    print("="*70)
    print("TESTE DO VISUALIZADOR FOLIUM")
    print("="*70)
    print()
    
    # Carregar dados de exemplo
    print("üìÇ Carregando dados de exemplo...")
    
    data_dir = project_root / "data"
    
    # Carregar pontos de entrega
    with open(data_dir / "sample_delivery_points.json", 'r', encoding='utf-8') as f:
        all_points = json.load(f)
    
    # Carregar ve√≠culos
    with open(data_dir / "sample_vehicles.json", 'r', encoding='utf-8') as f:
        vehicles = json.load(f)
    
    print(f"   ‚úì {len(all_points)} pontos de entrega carregados")
    print(f"   ‚úì {len(vehicles)} ve√≠culos carregados")
    print()
    
    # Usar apenas primeiros 15 pontos
    delivery_points = all_points[:15]
    
    # Definir rotas de exemplo (3 ve√≠culos)
    # Rota 1: Pontos 0, 2, 4, 7, 9 (5 entregas)
    # Rota 2: Pontos 1, 3, 5, 8, 10, 12 (6 entregas)
    # Rota 3: Pontos 6, 11, 13, 14 (4 entregas)
    routes = [
        [0, 2, 4, 7, 9],      # Ve√≠culo 1 - Van Refrigerada 01
        [1, 3, 5, 8, 10, 12], # Ve√≠culo 2 - Van Padr√£o 02
        [6, 11, 13, 14]       # Ve√≠culo 3 - Caminhonete 03
    ]
    
    print("üó∫Ô∏è Criando mapa interativo...")
    print(f"   ‚Ä¢ 3 ve√≠culos")
    print(f"   ‚Ä¢ 15 pontos de entrega")
    print(f"   ‚Ä¢ {sum(len(r) for r in routes)} entregas totais")
    print()
    
    # Exibir detalhes das rotas
    print("üìã DETALHES DAS ROTAS:")
    print("-" * 70)
    for i, route in enumerate(routes, 1):
        vehicle = vehicles[i-1]
        route_letters = ' ‚Üí '.join([get_point_label(idx) for idx in route])
        print(f"   Ve√≠culo {i} - {vehicle['name']}")
        print(f"   ‚îî‚îÄ {len(route)} entregas: Dep√≥sito ‚Üí {route_letters} ‚Üí Dep√≥sito")
    print("-" * 70)
    print()
    
    # Criar visualizador
    viz = FoliumVisualizer()
    
    # Criar mapa
    mapa = viz.create_map(
        delivery_points=delivery_points,
        routes=routes,
        vehicles=vehicles[:3],  # Usar apenas os 3 primeiros ve√≠culos
        zoom_start=12,
        show_route_arrows=True
    )
    
    # Salvar mapa
    filepath = viz.save_map(mapa, "teste_rotas_exemplo.html")
    
    # Informa√ß√µes finais
    print("‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
    print()
    print("üìç RECURSOS DO MAPA:")
    print("   ‚Ä¢ Marcadores coloridos por prioridade")
    print("   ‚Ä¢ Linhas coloridas para cada ve√≠culo")
    print("   ‚Ä¢ Setas animadas mostrando dire√ß√£o")
    print("   ‚Ä¢ Popups clic√°veis com informa√ß√µes")
    print("   ‚Ä¢ Legenda interativa")
    print("   ‚Ä¢ Mini mapa de navega√ß√£o")
    print("   ‚Ä¢ Controle de tela cheia")
    print("   ‚Ä¢ Zoom e navega√ß√£o")
    print()
    print("üåê COMO VISUALIZAR:")
    print(f"   1. Abra o arquivo: {filepath.absolute()}")
    print("   2. Use qualquer navegador (Chrome, Firefox, Edge, etc.)")
    print("   3. Clique nos marcadores para ver detalhes")
    print("   4. Clique nas linhas para ver informa√ß√µes da rota")
    print()
    print("="*70)
    
    return filepath


def test_folium_quick():
    """Teste usando a fun√ß√£o auxiliar r√°pida."""
    
    print()
    print("="*70)
    print("TESTE R√ÅPIDO (usando fun√ß√£o auxiliar)")
    print("="*70)
    print()
    
    # Carregar dados usando project_root
    data_dir = project_root / "data"
    
    with open(data_dir / "sample_delivery_points.json", 'r', encoding='utf-8') as f:
        points = json.load(f)[:15]
    
    with open(data_dir / "sample_vehicles.json", 'r', encoding='utf-8') as f:
        vehicles = json.load(f)
    
    # Rotas simples
    routes = [
        [0, 1, 2, 3, 4],
        [5, 6, 7, 8],
        [9, 10, 11, 12, 13, 14]
    ]
    
    print("üöÄ Gerando mapa com fun√ß√£o auxiliar...")
    
    # Gerar mapa usando fun√ß√£o auxiliar
    filepath = generate_route_map(
        delivery_points=points,
        routes=routes,
        vehicles=vehicles[:3],
        output_filename="teste_rotas_rapido.html"
    )
    
    print(f"‚úÖ Mapa gerado: {filepath.name}")
    print()
    
    return filepath


if __name__ == "__main__":
    try:
        # Teste b√°sico
        filepath1 = test_folium_basic()
        
        # Teste r√°pido
        filepath2 = test_folium_quick()
        
        print()
        print("üéâ TODOS OS TESTES PASSARAM!")
        print()
        print("üìÅ ARQUIVOS GERADOS:")
        print(f"   1. {filepath1.name}")
        print(f"   2. {filepath2.name}")
        print()
        print("üí° DICA: Arraste os arquivos .html para o navegador!")
        print()
        
    except FileNotFoundError as e:
        print()
        print("‚ùå ERRO: Arquivo n√£o encontrado!")
        print(f"   {e}")
        print()
        print("üí° Certifique-se de executar este script do diret√≥rio Tech-Challange-2/")
        print()
        
    except Exception as e:
        print()
        print("‚ùå ERRO INESPERADO:")
        print(f"   {e}")
        print()
        import traceback
        traceback.print_exc()

